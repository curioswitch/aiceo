// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: frontendapi/frontend.proto

package frontendapiconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	_go "github.com/curioswitch/aiceo/api/go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// FrontendServiceName is the fully-qualified name of the FrontendService service.
	FrontendServiceName = "frontendapi.FrontendService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// FrontendServiceStartChatProcedure is the fully-qualified name of the FrontendService's StartChat
	// RPC.
	FrontendServiceStartChatProcedure = "/frontendapi.FrontendService/StartChat"
	// FrontendServiceGetChatMessagesProcedure is the fully-qualified name of the FrontendService's
	// GetChatMessages RPC.
	FrontendServiceGetChatMessagesProcedure = "/frontendapi.FrontendService/GetChatMessages"
	// FrontendServiceSendMessageProcedure is the fully-qualified name of the FrontendService's
	// SendMessage RPC.
	FrontendServiceSendMessageProcedure = "/frontendapi.FrontendService/SendMessage"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	frontendServiceServiceDescriptor               = _go.File_frontendapi_frontend_proto.Services().ByName("FrontendService")
	frontendServiceStartChatMethodDescriptor       = frontendServiceServiceDescriptor.Methods().ByName("StartChat")
	frontendServiceGetChatMessagesMethodDescriptor = frontendServiceServiceDescriptor.Methods().ByName("GetChatMessages")
	frontendServiceSendMessageMethodDescriptor     = frontendServiceServiceDescriptor.Methods().ByName("SendMessage")
)

// FrontendServiceClient is a client for the frontendapi.FrontendService service.
type FrontendServiceClient interface {
	// Starts a chat session.
	StartChat(context.Context, *connect.Request[_go.StartChatRequest]) (*connect.Response[_go.StartChatResponse], error)
	// Gets messages in a chat.
	GetChatMessages(context.Context, *connect.Request[_go.GetChatMessagesRequest]) (*connect.Response[_go.GetChatMessagesResponse], error)
	// Sends a message in a chat.
	SendMessage(context.Context, *connect.Request[_go.SendMessageRequest]) (*connect.Response[_go.SendMessageResponse], error)
}

// NewFrontendServiceClient constructs a client for the frontendapi.FrontendService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFrontendServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) FrontendServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &frontendServiceClient{
		startChat: connect.NewClient[_go.StartChatRequest, _go.StartChatResponse](
			httpClient,
			baseURL+FrontendServiceStartChatProcedure,
			connect.WithSchema(frontendServiceStartChatMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getChatMessages: connect.NewClient[_go.GetChatMessagesRequest, _go.GetChatMessagesResponse](
			httpClient,
			baseURL+FrontendServiceGetChatMessagesProcedure,
			connect.WithSchema(frontendServiceGetChatMessagesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		sendMessage: connect.NewClient[_go.SendMessageRequest, _go.SendMessageResponse](
			httpClient,
			baseURL+FrontendServiceSendMessageProcedure,
			connect.WithSchema(frontendServiceSendMessageMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// frontendServiceClient implements FrontendServiceClient.
type frontendServiceClient struct {
	startChat       *connect.Client[_go.StartChatRequest, _go.StartChatResponse]
	getChatMessages *connect.Client[_go.GetChatMessagesRequest, _go.GetChatMessagesResponse]
	sendMessage     *connect.Client[_go.SendMessageRequest, _go.SendMessageResponse]
}

// StartChat calls frontendapi.FrontendService.StartChat.
func (c *frontendServiceClient) StartChat(ctx context.Context, req *connect.Request[_go.StartChatRequest]) (*connect.Response[_go.StartChatResponse], error) {
	return c.startChat.CallUnary(ctx, req)
}

// GetChatMessages calls frontendapi.FrontendService.GetChatMessages.
func (c *frontendServiceClient) GetChatMessages(ctx context.Context, req *connect.Request[_go.GetChatMessagesRequest]) (*connect.Response[_go.GetChatMessagesResponse], error) {
	return c.getChatMessages.CallUnary(ctx, req)
}

// SendMessage calls frontendapi.FrontendService.SendMessage.
func (c *frontendServiceClient) SendMessage(ctx context.Context, req *connect.Request[_go.SendMessageRequest]) (*connect.Response[_go.SendMessageResponse], error) {
	return c.sendMessage.CallUnary(ctx, req)
}

// FrontendServiceHandler is an implementation of the frontendapi.FrontendService service.
type FrontendServiceHandler interface {
	// Starts a chat session.
	StartChat(context.Context, *connect.Request[_go.StartChatRequest]) (*connect.Response[_go.StartChatResponse], error)
	// Gets messages in a chat.
	GetChatMessages(context.Context, *connect.Request[_go.GetChatMessagesRequest]) (*connect.Response[_go.GetChatMessagesResponse], error)
	// Sends a message in a chat.
	SendMessage(context.Context, *connect.Request[_go.SendMessageRequest]) (*connect.Response[_go.SendMessageResponse], error)
}

// NewFrontendServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFrontendServiceHandler(svc FrontendServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	frontendServiceStartChatHandler := connect.NewUnaryHandler(
		FrontendServiceStartChatProcedure,
		svc.StartChat,
		connect.WithSchema(frontendServiceStartChatMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceGetChatMessagesHandler := connect.NewUnaryHandler(
		FrontendServiceGetChatMessagesProcedure,
		svc.GetChatMessages,
		connect.WithSchema(frontendServiceGetChatMessagesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceSendMessageHandler := connect.NewUnaryHandler(
		FrontendServiceSendMessageProcedure,
		svc.SendMessage,
		connect.WithSchema(frontendServiceSendMessageMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/frontendapi.FrontendService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case FrontendServiceStartChatProcedure:
			frontendServiceStartChatHandler.ServeHTTP(w, r)
		case FrontendServiceGetChatMessagesProcedure:
			frontendServiceGetChatMessagesHandler.ServeHTTP(w, r)
		case FrontendServiceSendMessageProcedure:
			frontendServiceSendMessageHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedFrontendServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedFrontendServiceHandler struct{}

func (UnimplementedFrontendServiceHandler) StartChat(context.Context, *connect.Request[_go.StartChatRequest]) (*connect.Response[_go.StartChatResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("frontendapi.FrontendService.StartChat is not implemented"))
}

func (UnimplementedFrontendServiceHandler) GetChatMessages(context.Context, *connect.Request[_go.GetChatMessagesRequest]) (*connect.Response[_go.GetChatMessagesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("frontendapi.FrontendService.GetChatMessages is not implemented"))
}

func (UnimplementedFrontendServiceHandler) SendMessage(context.Context, *connect.Request[_go.SendMessageRequest]) (*connect.Response[_go.SendMessageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("frontendapi.FrontendService.SendMessage is not implemented"))
}
