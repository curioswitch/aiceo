syntax = "proto3";

package frontendapi;

option go_package = "github.com/curioswitch/aiceo/api/go;frontendapi";

// A user gender.
enum Gender {
  // Gender has not been set.
  GENDER_UNSPECIFIED = 0;

  // Male.
  GENDER_MALE = 1;

  // Female.
  GENDER_FEMALE = 2;

  // Other.
  GENDER_OTHER = 3;
}

// Details about a single chat.
message Chat {
  // The ID of the chat.
  string id = 1;

  // The description of the chat as a set of parts.
  repeated string description = 2;

  // The gender of the user initiaiting the chat.
  Gender gender = 3;

  // Details of CEOs to presented to the user in this chat.
  repeated CEODetails ceo_details = 4;
}

// A request to get all chats.
message GetChatsRequest {}

// A response to a request to get all chats.
message GetChatsResponse {
  // The fetched chats.
  repeated Chat chats = 1;
}

// Details of a CEO.
message CEODetails {
  // The key for the CEO for programmatic usage.
  string key = 1;

  // The advice from the CEO.
  string advice = 2;

  // The excerpt summary for the advice.
  string summary = 3;
}

// Details about a message within a chat.
message ChatMessage {
  // The ID of the message.
  string id = 1;

  // The text content of the message.
  string message = 2;

  // Whether the message is from the user. Otherwise, it is from the assistant.
  bool is_user = 3;

  // Choices for the user to select from for the message.
  repeated string choices = 4;

  // Details of CEOs to present to the user.
  repeated CEODetails ceo_details = 5;
}

// A request to begin a chat session.
message StartChatRequest {}

// A response to a request to begin a chat session.
message StartChatResponse {
  // The ID of the new chat.
  string chat_id = 1;

  // The initial message of the chat.
  ChatMessage message = 2;
}

// A request to get messages in a chat.
message GetChatMessagesRequest {
  // The ID of the chat to get messages for.
  string chat_id = 1;
}

// A response to a request to get messages in a chat.
message GetChatMessagesResponse {
  // The messages in the chat.
  repeated ChatMessage messages = 1;
}

// A request to send a message in a chat.
message SendMessageRequest {
  // The ID of the chat to send the message in.
  string chat_id = 1;

  // The message to send.
  string message = 2;
}

// A response to a request to send a message in a chat.
message SendMessageResponse {
  // New messages in the chat. This will include the request message as well.
  repeated ChatMessage messages = 1;
}

// The service for the frontend.
service FrontendService {
  // Gets all chats.
  rpc GetChats(GetChatsRequest) returns (GetChatsResponse);

  // Starts a chat session.
  rpc StartChat(StartChatRequest) returns (StartChatResponse);

  // Gets messages in a chat.
  rpc GetChatMessages(GetChatMessagesRequest) returns (GetChatMessagesResponse);

  // Sends a message in a chat.
  rpc SendMessage(SendMessageRequest) returns (SendMessageResponse);
}
